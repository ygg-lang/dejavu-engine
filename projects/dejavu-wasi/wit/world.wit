package dejavu: core@0.1.0;

world host {
    export types;
    export syntax-tree;
    export backends;
}

interface types {
    record object {
        map: list<tuple<string, value>>,
    }
    variant value {
        %null,
        %bool(bool),
        %integer(s64),
        %decimal(f64),
        %string(string),
    }
    variant dejavu-error {
        syntax(syntax-error),
    }
    resource url {

    }
    record text-range {
        head-offset: u32,
        tail-offset: u32,
    }
    record syntax-error {
        reason: string,
        file: option<url>,
        range: text-range,
    }
}

interface syntax-tree {
    use types.{text-range, url, object, dejavu-error};

    record dejavu-template {
        blocks: list<template-item>,
        config: object,
        path: option<url>
    }
    variant template-item {
        %placeholder,
        %text(text-element),
    }

    record text-element {
        body: string,
        range: text-range,
    }
}

interface backends {
    use syntax-tree.{dejavu-template};
    use types.{text-range, url, object, dejavu-error};

    ///
    resource rust-vanilla {
        constructor(directory: string);
        finalize: func(ast: dejavu-template) -> result<_, dejavu-error>;
    }

    resource rust-dejavu {
        constructor(directory: string);
        generate: func(ast: dejavu-template) -> result<_, dejavu-error>;
    }

    resource java-script-vanilla {
        constructor(directory: string);
        finalize: func(ast: dejavu-template) -> result<_, dejavu-error>;
    }

    resource type-script-vanilla {
        constructor(directory: string);
        finalize: func(ast: dejavu-template) -> result<_, dejavu-error>;
    }
}

