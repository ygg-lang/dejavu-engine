// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod dejavu {
        #[allow(dead_code)]
        pub mod core {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;

                use super::super::super::super::_rt;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Url {
                    handle: _rt::Resource<Url>,
                }

                type _UrlRep<T> = Option<T>;

                impl Url {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Url`.
                    pub fn new<T: GuestUrl>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _UrlRep<T> = Some(val);
                        let ptr: *mut _UrlRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe {
                            Self::from_handle(T::_resource_new(ptr.cast()))
                        }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestUrl>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestUrl>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestUrl>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestUrl` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _UrlRep<T>);
                    }

                    fn as_ptr<T: GuestUrl>(&self) -> *mut _UrlRep<T> {
                        Url::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Url`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct UrlBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Url>,
                }

                impl<'a> UrlBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestUrl>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _UrlRep<T> {
                        Url::type_guard::<T>();
                        self.rep.cast()
                    }
                }


                unsafe impl _rt::WasmResource for Url {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]url"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                pub enum Value {
                    Null,
                    Bool(bool),
                    Integer(i64),
                    Decimal(f64),
                    String(_rt::String),
                    Url(Url),
                }

                impl ::core::fmt::Debug for Value {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Value::Null => {
                                f.debug_tuple("Value::Null").finish()
                            }
                            Value::Bool(e) => {
                                f.debug_tuple("Value::Bool").field(e).finish()
                            }
                            Value::Integer(e) => {
                                f.debug_tuple("Value::Integer").field(e).finish()
                            }
                            Value::Decimal(e) => {
                                f.debug_tuple("Value::Decimal").field(e).finish()
                            }
                            Value::String(e) => {
                                f.debug_tuple("Value::String").field(e).finish()
                            }
                            Value::Url(e) => {
                                f.debug_tuple("Value::Url").field(e).finish()
                            }
                        }
                    }
                }

                pub struct Object {
                    pub map: _rt::Vec::<(_rt::String, Value, )>,
                }

                impl ::core::fmt::Debug for Object {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Object").field("map", &self.map).finish()
                    }
                }

                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct TextRange {
                    pub head_offset: u32,
                    pub tail_offset: u32,
                }

                impl ::core::fmt::Debug for TextRange {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TextRange").field("head-offset", &self.head_offset).field("tail-offset", &self.tail_offset).finish()
                    }
                }

                pub struct SyntaxError {
                    pub reason: _rt::String,
                    pub file: Option<Url>,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for SyntaxError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("SyntaxError").field("reason", &self.reason).field("file", &self.file).field("range", &self.range).finish()
                    }
                }

                pub enum NotedownError {
                    Syntax(SyntaxError),
                }

                impl ::core::fmt::Debug for NotedownError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            NotedownError::Syntax(e) => {
                                f.debug_tuple("NotedownError::Syntax").field(e).finish()
                            }
                        }
                    }
                }

                pub trait Guest {
                    type Url: GuestUrl;
                }

                pub trait GuestUrl: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                        where Self: Sized
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]url"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                        where Self: Sized
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]url"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe {
                                rep(handle)
                            }
                        }
                    }
                }
                #[doc(hidden)]

                macro_rules! __export_dejavu_core_types_0_1_0_cabi {
          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


            const _: () = {
              #[doc(hidden)]
              #[export_name = "dejavu:core/types@0.1.0#[dtor]url"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn dtor(rep: *mut u8) {
                $($path_to_types)*::Url::dtor::<
                <$ty as $($path_to_types)*::Guest>::Url
                >(rep)
              }
            };
            
          };);
        }
                #[doc(hidden)]
                pub(crate) use __export_dejavu_core_types_0_1_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod syntax_tree {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;

                use super::super::super::super::_rt;

                pub type TextRange = super::super::super::super::exports::dejavu::core::types::TextRange;
                pub type Url = super::super::super::super::exports::dejavu::core::types::Url;
                pub type UrlBorrow<'a> = super::super::super::super::exports::dejavu::core::types::UrlBorrow<'a>;
                pub type Object = super::super::super::super::exports::dejavu::core::types::Object;
                pub type NotedownError = super::super::super::super::exports::dejavu::core::types::NotedownError;

                /// === line breaks === -----------------------------------------------------------------------------
                /// The line break block
                /// ```note
                /// ===
                /// ````
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct HorizontalRule {
                    pub lines: u32,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for HorizontalRule {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("HorizontalRule").field("lines", &self.lines).field("range", &self.range).finish()
                    }
                }

                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct BreaklineBlock {
                    pub lines: u32,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for BreaklineBlock {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("BreaklineBlock").field("lines", &self.lines).field("range", &self.range).finish()
                    }
                }

                #[derive(Clone)]
                pub struct SpaceInline {
                    pub space: _rt::String,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for SpaceInline {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("SpaceInline").field("space", &self.space).field("range", &self.range).finish()
                    }
                }

                /// The math text written in the paragraph
                ///
                /// ### Example
                /// ````note
                /// ```language
                /// highlight
                /// ```
                /// ````
                #[derive(Clone)]
                pub struct CodeHighlight {
                    pub language: _rt::String,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for CodeHighlight {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("CodeHighlight").field("language", &self.language).field("range", &self.range).finish()
                    }
                }

                #[derive(Clone)]
                pub enum CommandAction {
                    /// anonymous highlighting
                    Anonymous,
                    Highlight(CodeHighlight),
                }

                impl ::core::fmt::Debug for CommandAction {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            CommandAction::Anonymous => {
                                f.debug_tuple("CommandAction::Anonymous").finish()
                            }
                            CommandAction::Highlight(e) => {
                                f.debug_tuple("CommandAction::Highlight").field(e).finish()
                            }
                        }
                    }
                }

                /// === line breaks === -----------------------------------------------------------------------------
                /// The math text written in the paragraph
                ///
                /// ### Example
                /// ````note
                /// ```code(key: args)
                /// ```
                /// ````
                #[derive(Clone)]
                pub struct CodeEnvironment {
                    pub action: CommandAction,
                    pub lines: _rt::String,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for CodeEnvironment {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("CodeEnvironment").field("action", &self.action).field("lines", &self.lines).field("range", &self.range).finish()
                    }
                }

                #[derive(Clone)]
                pub struct CommandEnvironment {
                    pub action: CommandAction,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for CommandEnvironment {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("CommandEnvironment").field("action", &self.action).field("range", &self.range).finish()
                    }
                }

                #[derive(Clone, Copy)]
                pub enum MathDisplay {
                    Inline,
                    Block,
                }

                impl ::core::fmt::Debug for MathDisplay {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            MathDisplay::Inline => {
                                f.debug_tuple("MathDisplay::Inline").finish()
                            }
                            MathDisplay::Block => {
                                f.debug_tuple("MathDisplay::Block").finish()
                            }
                        }
                    }
                }

                #[derive(Clone)]
                pub enum MathContent {
                    /// MathML element
                    Mathml(_rt::String),
                    /// TeX ompatible formulas, including `mathjax` and `katex`
                    Tex(_rt::String),
                    Asciimath(_rt::String),
                }

                impl ::core::fmt::Debug for MathContent {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            MathContent::Mathml(e) => {
                                f.debug_tuple("MathContent::Mathml").field(e).finish()
                            }
                            MathContent::Tex(e) => {
                                f.debug_tuple("MathContent::Tex").field(e).finish()
                            }
                            MathContent::Asciimath(e) => {
                                f.debug_tuple("MathContent::Asciimath").field(e).finish()
                            }
                        }
                    }
                }

                /// === line breaks === -----------------------------------------------------------------------------
                /// The math text written in the paragraph
                ///
                /// ### Example
                /// ```note
                /// The naunce of the universe is $6.022\times 10^{23}$
                /// ```
                #[derive(Clone)]
                pub struct MathEnvironment {
                    pub display: MathDisplay,
                    pub content: MathContent,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for MathEnvironment {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("MathEnvironment").field("display", &self.display).field("content", &self.content).field("range", &self.range).finish()
                    }
                }

                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct ListItem {
                    pub level: u32,
                    /// content: list<paragraph-block>,
                    pub checked: Option<bool>,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for ListItem {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ListItem").field("level", &self.level).field("checked", &self.checked).field("range", &self.range).finish()
                    }
                }

                /// === line breaks === -----------------------------------------------------------------------------
                #[derive(Clone)]
                pub struct ListEnvironment {
                    pub items: _rt::Vec::<ListItem>,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for ListEnvironment {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ListEnvironment").field("items", &self.items).field("range", &self.range).finish()
                    }
                }

                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct TableCell {
                    /// content: paragraph-block,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for TableCell {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TableCell").field("range", &self.range).finish()
                    }
                }

                #[derive(Clone)]
                pub struct TableRow {
                    pub cells: _rt::Vec::<TableCell>,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for TableRow {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TableRow").field("cells", &self.cells).field("range", &self.range).finish()
                    }
                }

                /// === line breaks === -----------------------------------------------------------------------------
                #[derive(Clone)]
                pub struct TableEnvironment {
                    pub rows: _rt::Vec::<TableRow>,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for TableEnvironment {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TableEnvironment").field("rows", &self.rows).field("range", &self.range).finish()
                    }
                }

                #[derive(Clone)]
                pub struct NormalText {
                    pub text: _rt::String,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for NormalText {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("NormalText").field("text", &self.text).field("range", &self.range).finish()
                    }
                }
                wit_bindgen::rt::bitflags::bitflags! {
          #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
          pub struct StyleType: u8 {
            const BOLD = 1 << 0;
            const ITALIC = 1 << 1;
            const UNDERLINE = 1 << 2;
            const STRIKETHROUGH = 1 << 3;
          }
        }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct StyledText {
                    pub type_: StyleType,
                    /// items: list<paragraph-item>,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for StyledText {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("StyledText").field("type", &self.type_).field("range", &self.range).finish()
                    }
                }

                /// `\image(url, text)`
                pub struct ImageReference {
                    pub url: Option<Url>,
                    pub alternative: _rt::String,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for ImageReference {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ImageReference").field("url", &self.url).field("alternative", &self.alternative).field("range", &self.range).finish()
                    }
                }

                /// `\link(url, text)`
                pub struct LinkReference {
                    pub url: Option<Url>,
                    pub title: _rt::String,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for LinkReference {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("LinkReference").field("url", &self.url).field("title", &self.title).field("range", &self.range).finish()
                    }
                }

                pub enum ParagraphItem {
                    Placeholder,
                    Text(NormalText),
                    Style(StyledText),
                    Math(MathEnvironment),
                    Code(CodeEnvironment),
                    Link(LinkReference),
                    Image(ImageReference),
                }

                impl ::core::fmt::Debug for ParagraphItem {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            ParagraphItem::Placeholder => {
                                f.debug_tuple("ParagraphItem::Placeholder").finish()
                            }
                            ParagraphItem::Text(e) => {
                                f.debug_tuple("ParagraphItem::Text").field(e).finish()
                            }
                            ParagraphItem::Style(e) => {
                                f.debug_tuple("ParagraphItem::Style").field(e).finish()
                            }
                            ParagraphItem::Math(e) => {
                                f.debug_tuple("ParagraphItem::Math").field(e).finish()
                            }
                            ParagraphItem::Code(e) => {
                                f.debug_tuple("ParagraphItem::Code").field(e).finish()
                            }
                            ParagraphItem::Link(e) => {
                                f.debug_tuple("ParagraphItem::Link").field(e).finish()
                            }
                            ParagraphItem::Image(e) => {
                                f.debug_tuple("ParagraphItem::Image").field(e).finish()
                            }
                        }
                    }
                }

                /// === paragraph environment === -----------------------------------------------------------------------------
                pub struct ParagraphBlock {
                    pub terms: _rt::Vec::<ParagraphItem>,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for ParagraphBlock {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ParagraphBlock").field("terms", &self.terms).field("range", &self.range).finish()
                    }
                }

                /// === title block === -----------------------------------------------------------------------------
                /// \title { text }
                pub struct HeadingBlock {
                    pub level: u8,
                    pub title: ParagraphBlock,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for HeadingBlock {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("HeadingBlock").field("level", &self.level).field("title", &self.title).field("range", &self.range).finish()
                    }
                }

                pub enum RootItem {
                    Placeholder,
                    Heading(HeadingBlock),
                    HorizontalRule(HorizontalRule),
                    Paragraph(ParagraphBlock),
                    SpaceBreak(BreaklineBlock),
                    Code(CodeEnvironment),
                    Math(MathEnvironment),
                    List(ListEnvironment),
                    Table(TableEnvironment),
                }

                impl ::core::fmt::Debug for RootItem {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            RootItem::Placeholder => {
                                f.debug_tuple("RootItem::Placeholder").finish()
                            }
                            RootItem::Heading(e) => {
                                f.debug_tuple("RootItem::Heading").field(e).finish()
                            }
                            RootItem::HorizontalRule(e) => {
                                f.debug_tuple("RootItem::HorizontalRule").field(e).finish()
                            }
                            RootItem::Paragraph(e) => {
                                f.debug_tuple("RootItem::Paragraph").field(e).finish()
                            }
                            RootItem::SpaceBreak(e) => {
                                f.debug_tuple("RootItem::SpaceBreak").field(e).finish()
                            }
                            RootItem::Code(e) => {
                                f.debug_tuple("RootItem::Code").field(e).finish()
                            }
                            RootItem::Math(e) => {
                                f.debug_tuple("RootItem::Math").field(e).finish()
                            }
                            RootItem::List(e) => {
                                f.debug_tuple("RootItem::List").field(e).finish()
                            }
                            RootItem::Table(e) => {
                                f.debug_tuple("RootItem::Table").field(e).finish()
                            }
                        }
                    }
                }

                pub struct NotedownRoot {
                    pub blocks: _rt::Vec::<RootItem>,
                    pub config: Object,
                    pub path: Option<Url>,
                }

                impl ::core::fmt::Debug for NotedownRoot {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("NotedownRoot").field("blocks", &self.blocks).field("config", &self.config).field("path", &self.path).finish()
                    }
                }
                #[doc(hidden)]

                macro_rules! __export_dejavu_core_syntax_tree_0_1_0_cabi {
          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          };);
        }
                #[doc(hidden)]
                pub(crate) use __export_dejavu_core_syntax_tree_0_1_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod math {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                #[doc(hidden)]

                macro_rules! __export_dejavu_core_math_0_1_0_cabi {
          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          };);
        }
                #[doc(hidden)]
                pub(crate) use __export_dejavu_core_math_0_1_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod code {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                #[doc(hidden)]

                macro_rules! __export_dejavu_core_code_0_1_0_cabi {
          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          };);
        }
                #[doc(hidden)]
                pub(crate) use __export_dejavu_core_code_0_1_0_cabi;
            }
        }
    }
}

mod _rt {
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }

    pub use alloc_crate::boxed::Box;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_host_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::dejavu::core::types::__export_dejavu_core_types_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::dejavu::core::types);
  $($path_to_types_root)*::exports::dejavu::core::syntax_tree::__export_dejavu_core_syntax_tree_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::dejavu::core::syntax_tree);
  $($path_to_types_root)*::exports::dejavu::core::math::__export_dejavu_core_math_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::dejavu::core::math);
  $($path_to_types_root)*::exports::dejavu::core::code::__export_dejavu_core_code_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::dejavu::core::code);
  )
}
#[doc(inline)]
pub(crate) use __export_host_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:host:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1820] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa1\x0d\x01A\x02\x01\
A\x0c\x01B\x0f\x04\0\x03url\x03\x01\x01i\0\x01q\x06\x04null\0\0\x04bool\x01\x7f\0\
\x07integer\x01x\0\x07decimal\x01u\0\x06string\x01s\0\x03url\x01\x01\0\x04\0\x05\
value\x03\0\x02\x01o\x02s\x03\x01p\x04\x01r\x01\x03map\x05\x04\0\x06object\x03\0\
\x06\x01r\x02\x0bhead-offsety\x0btail-offsety\x04\0\x0atext-range\x03\0\x08\x01k\
\x01\x01r\x03\x06reasons\x04file\x0a\x05range\x09\x04\0\x0csyntax-error\x03\0\x0b\
\x01q\x01\x06syntax\x01\x0c\0\x04\0\x0enotedown-error\x03\0\x0d\x04\x01\x17dejav\
u:core/types@0.1.0\x05\0\x02\x03\0\0\x0atext-range\x02\x03\0\0\x03url\x02\x03\0\0\
\x06object\x02\x03\0\0\x0enotedown-error\x01BB\x02\x03\x02\x01\x01\x04\0\x0atext\
-range\x03\0\0\x02\x03\x02\x01\x02\x04\0\x03url\x03\0\x02\x02\x03\x02\x01\x03\x04\
\0\x06object\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x0enotedown-error\x03\0\x06\x01\
r\x02\x05linesy\x05range\x01\x04\0\x0fhorizontal-rule\x03\0\x08\x01r\x02\x05line\
sy\x05range\x01\x04\0\x0fbreakline-block\x03\0\x0a\x01r\x02\x05spaces\x05range\x01\
\x04\0\x0cspace-inline\x03\0\x0c\x01r\x02\x08languages\x05range\x01\x04\0\x0ecod\
e-highlight\x03\0\x0e\x01q\x02\x09anonymous\0\0\x09highlight\x01\x0f\0\x04\0\x0e\
command-action\x03\0\x10\x01r\x03\x06action\x11\x05liness\x05range\x01\x04\0\x10\
code-environment\x03\0\x12\x01r\x02\x06action\x11\x05range\x01\x04\0\x13command-\
environment\x03\0\x14\x01q\x02\x06inline\0\0\x05block\0\0\x04\0\x0cmath-display\x03\
\0\x16\x01q\x03\x06mathml\x01s\0\x03tex\x01s\0\x09asciimath\x01s\0\x04\0\x0cmath\
-content\x03\0\x18\x01r\x03\x07display\x17\x07content\x19\x05range\x01\x04\0\x10\
math-environment\x03\0\x1a\x01k\x7f\x01r\x03\x05levely\x07checked\x1c\x05range\x01\
\x04\0\x09list-item\x03\0\x1d\x01p\x1e\x01r\x02\x05items\x1f\x05range\x01\x04\0\x10\
list-environment\x03\0\x20\x01r\x01\x05range\x01\x04\0\x0atable-cell\x03\0\"\x01\
p#\x01r\x02\x05cells$\x05range\x01\x04\0\x09table-row\x03\0%\x01p&\x01r\x02\x04r\
ows'\x05range\x01\x04\0\x11table-environment\x03\0(\x01r\x02\x04texts\x05range\x01\
\x04\0\x0bnormal-text\x03\0*\x01n\x04\x04bold\x06italic\x09underline\x0dstriketh\
rough\x04\0\x0astyle-type\x03\0,\x01r\x02\x04type-\x05range\x01\x04\0\x0bstyled-\
text\x03\0.\x01i\x03\x01k0\x01r\x03\x03url1\x0balternatives\x05range\x01\x04\0\x0f\
image-reference\x03\02\x01r\x03\x03url1\x05titles\x05range\x01\x04\0\x0elink-ref\
erence\x03\04\x01q\x07\x0bplaceholder\0\0\x04text\x01+\0\x05style\x01/\0\x04math\
\x01\x1b\0\x04code\x01\x13\0\x04link\x015\0\x05image\x013\0\x04\0\x0eparagraph-i\
tem\x03\06\x01p7\x01r\x02\x05terms8\x05range\x01\x04\0\x0fparagraph-block\x03\09\
\x01r\x03\x05level}\x05title:\x05range\x01\x04\0\x0dheading-block\x03\0;\x01q\x09\
\x0bplaceholder\0\0\x07heading\x01<\0\x0fhorizontal-rule\x01\x09\0\x09paragraph\x01\
:\0\x0bspace-break\x01\x0b\0\x04code\x01\x13\0\x04math\x01\x1b\0\x04list\x01!\0\x05\
table\x01)\0\x04\0\x09root-item\x03\0=\x01p>\x01r\x03\x06blocks?\x06config\x05\x04\
path1\x04\0\x0dnotedown-root\x03\0@\x04\x01\x1ddejavu:core/syntax-tree@0.1.0\x05\
\x05\x01B\0\x04\x01\x16dejavu:core/math@0.1.0\x05\x06\x01B\0\x04\x01\x16dejavu:c\
ore/code@0.1.0\x05\x07\x04\x01\x16dejavu:core/host@0.1.0\x04\0\x0b\x0a\x01\0\x04\
host\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.202.0\
\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}

