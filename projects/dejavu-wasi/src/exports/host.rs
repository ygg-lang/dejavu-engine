// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod dejavu {
        #[allow(dead_code)]
        pub mod core {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub enum Value {
                    Null,
                    Bool(bool),
                    Integer(i64),
                    Decimal(f64),
                    String(_rt::String),
                }
                impl ::core::fmt::Debug for Value {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Value::Null => f.debug_tuple("Value::Null").finish(),
                            Value::Bool(e) => f.debug_tuple("Value::Bool").field(e).finish(),
                            Value::Integer(e) => f.debug_tuple("Value::Integer").field(e).finish(),
                            Value::Decimal(e) => f.debug_tuple("Value::Decimal").field(e).finish(),
                            Value::String(e) => f.debug_tuple("Value::String").field(e).finish(),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct Object {
                    pub map: _rt::Vec<(_rt::String, Value)>,
                }
                impl ::core::fmt::Debug for Object {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Object").field("map", &self.map).finish()
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Url {
                    handle: _rt::Resource<Url>,
                }

                type _UrlRep<T> = Option<T>;

                impl Url {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Url`.
                    pub fn new<T: GuestUrl>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _UrlRep<T> = Some(val);
                        let ptr: *mut _UrlRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestUrl>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestUrl>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestUrl>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestUrl` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _UrlRep<T>);
                    }

                    fn as_ptr<T: GuestUrl>(&self) -> *mut _UrlRep<T> {
                        Url::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Url`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct UrlBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Url>,
                }

                impl<'a> UrlBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestUrl>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _UrlRep<T> {
                        Url::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Url {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]url"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct TextRange {
                    pub head_offset: u32,
                    pub tail_offset: u32,
                }
                impl ::core::fmt::Debug for TextRange {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TextRange")
                            .field("head-offset", &self.head_offset)
                            .field("tail-offset", &self.tail_offset)
                            .finish()
                    }
                }
                pub struct SyntaxError {
                    pub reason: _rt::String,
                    pub file: Option<Url>,
                    pub range: TextRange,
                }
                impl ::core::fmt::Debug for SyntaxError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("SyntaxError")
                            .field("reason", &self.reason)
                            .field("file", &self.file)
                            .field("range", &self.range)
                            .finish()
                    }
                }
                pub enum DejavuError {
                    Syntax(SyntaxError),
                }
                impl ::core::fmt::Debug for DejavuError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            DejavuError::Syntax(e) => f.debug_tuple("DejavuError::Syntax").field(e).finish(),
                        }
                    }
                }
                impl ::core::fmt::Display for DejavuError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }

                impl std::error::Error for DejavuError {}
                pub trait Guest {
                    type Url: GuestUrl;
                }
                pub trait GuestUrl: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]url"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]url"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                }
                #[doc(hidden)]

                macro_rules! __export_dejavu_core_types_0_1_0_cabi{
          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


            const _: () = {
              #[doc(hidden)]
              #[export_name = "dejavu:core/types@0.1.0#[dtor]url"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn dtor(rep: *mut u8) {
                $($path_to_types)*::Url::dtor::<
                <$ty as $($path_to_types)*::Guest>::Url
                >(rep)
              }
            };

          };);
        }
                #[doc(hidden)]
                pub(crate) use __export_dejavu_core_types_0_1_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod syntax_tree {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type TextRange = super::super::super::super::exports::dejavu::core::types::TextRange;
                pub type Url = super::super::super::super::exports::dejavu::core::types::Url;
                pub type UrlBorrow<'a> = super::super::super::super::exports::dejavu::core::types::UrlBorrow<'a>;
                pub type Object = super::super::super::super::exports::dejavu::core::types::Object;
                pub type DejavuError = super::super::super::super::exports::dejavu::core::types::DejavuError;
                #[derive(Clone)]
                pub struct TextElement {
                    pub body: _rt::String,
                    pub range: TextRange,
                }
                impl ::core::fmt::Debug for TextElement {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TextElement").field("body", &self.body).field("range", &self.range).finish()
                    }
                }
                #[derive(Clone)]
                pub enum TemplateItem {
                    Placeholder,
                    Text(TextElement),
                }
                impl ::core::fmt::Debug for TemplateItem {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            TemplateItem::Placeholder => f.debug_tuple("TemplateItem::Placeholder").finish(),
                            TemplateItem::Text(e) => f.debug_tuple("TemplateItem::Text").field(e).finish(),
                        }
                    }
                }
                pub struct DejavuTemplate {
                    pub blocks: _rt::Vec<TemplateItem>,
                    pub config: Object,
                    pub path: Option<Url>,
                }
                impl ::core::fmt::Debug for DejavuTemplate {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("DejavuTemplate")
                            .field("blocks", &self.blocks)
                            .field("config", &self.config)
                            .field("path", &self.path)
                            .finish()
                    }
                }
                #[doc(hidden)]

                macro_rules! __export_dejavu_core_syntax_tree_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _: () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_dejavu_core_syntax_tree_0_1_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod backends {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type DejavuTemplate = super::super::super::super::exports::dejavu::core::syntax_tree::DejavuTemplate;
                pub type TextRange = super::super::super::super::exports::dejavu::core::types::TextRange;
                pub type Url = super::super::super::super::exports::dejavu::core::types::Url;
                pub type UrlBorrow<'a> = super::super::super::super::exports::dejavu::core::types::UrlBorrow<'a>;
                pub type Object = super::super::super::super::exports::dejavu::core::types::Object;
                pub type DejavuError = super::super::super::super::exports::dejavu::core::types::DejavuError;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct RustVanilla {
                    handle: _rt::Resource<RustVanilla>,
                }

                type _RustVanillaRep<T> = Option<T>;

                impl RustVanilla {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `RustVanilla`.
                    pub fn new<T: GuestRustVanilla>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _RustVanillaRep<T> = Some(val);
                        let ptr: *mut _RustVanillaRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestRustVanilla>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestRustVanilla>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestRustVanilla>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestRustVanilla` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _RustVanillaRep<T>);
                    }

                    fn as_ptr<T: GuestRustVanilla>(&self) -> *mut _RustVanillaRep<T> {
                        RustVanilla::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`RustVanilla`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct RustVanillaBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a RustVanilla>,
                }

                impl<'a> RustVanillaBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestRustVanilla>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _RustVanillaRep<T> {
                        RustVanilla::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for RustVanilla {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]rust-vanilla"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct RustDejavu {
                    handle: _rt::Resource<RustDejavu>,
                }

                type _RustDejavuRep<T> = Option<T>;

                impl RustDejavu {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `RustDejavu`.
                    pub fn new<T: GuestRustDejavu>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _RustDejavuRep<T> = Some(val);
                        let ptr: *mut _RustDejavuRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestRustDejavu>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestRustDejavu>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestRustDejavu>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestRustDejavu` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _RustDejavuRep<T>);
                    }

                    fn as_ptr<T: GuestRustDejavu>(&self) -> *mut _RustDejavuRep<T> {
                        RustDejavu::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`RustDejavu`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct RustDejavuBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a RustDejavu>,
                }

                impl<'a> RustDejavuBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestRustDejavu>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _RustDejavuRep<T> {
                        RustDejavu::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for RustDejavu {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]rust-dejavu"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct JavaScriptVanilla {
                    handle: _rt::Resource<JavaScriptVanilla>,
                }

                type _JavaScriptVanillaRep<T> = Option<T>;

                impl JavaScriptVanilla {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `JavaScriptVanilla`.
                    pub fn new<T: GuestJavaScriptVanilla>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _JavaScriptVanillaRep<T> = Some(val);
                        let ptr: *mut _JavaScriptVanillaRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestJavaScriptVanilla>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestJavaScriptVanilla>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestJavaScriptVanilla>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestJavaScriptVanilla` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _JavaScriptVanillaRep<T>);
                    }

                    fn as_ptr<T: GuestJavaScriptVanilla>(&self) -> *mut _JavaScriptVanillaRep<T> {
                        JavaScriptVanilla::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`JavaScriptVanilla`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct JavaScriptVanillaBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a JavaScriptVanilla>,
                }

                impl<'a> JavaScriptVanillaBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestJavaScriptVanilla>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _JavaScriptVanillaRep<T> {
                        JavaScriptVanilla::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for JavaScriptVanilla {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]java-script-vanilla"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TypeScriptVanilla {
                    handle: _rt::Resource<TypeScriptVanilla>,
                }

                type _TypeScriptVanillaRep<T> = Option<T>;

                impl TypeScriptVanilla {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `TypeScriptVanilla`.
                    pub fn new<T: GuestTypeScriptVanilla>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _TypeScriptVanillaRep<T> = Some(val);
                        let ptr: *mut _TypeScriptVanillaRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestTypeScriptVanilla>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestTypeScriptVanilla>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestTypeScriptVanilla>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestTypeScriptVanilla` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _TypeScriptVanillaRep<T>);
                    }

                    fn as_ptr<T: GuestTypeScriptVanilla>(&self) -> *mut _TypeScriptVanillaRep<T> {
                        TypeScriptVanilla::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`TypeScriptVanilla`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TypeScriptVanillaBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a TypeScriptVanilla>,
                }

                impl<'a> TypeScriptVanillaBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestTypeScriptVanilla>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _TypeScriptVanillaRep<T> {
                        TypeScriptVanilla::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for TypeScriptVanilla {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]type-script-vanilla"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_rust_vanilla_cabi<T: GuestRustVanilla>(arg0: *mut u8, arg1: usize) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = RustVanilla::new(T::new(_rt::string_lift(bytes0)));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_rust_vanilla_finalize_cabi<T: GuestRustVanilla>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base7 = arg1;
                    let len7 = arg2;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7.add(i * 20);
                        let e7 = {
                            let l0 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::exports::dejavu::core::syntax_tree::TemplateItem as V6;
                            let v6 = match l0 {
                                0 => V6::Placeholder,
                                n => {
                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                    let e6 = {
                                        let l1 = *base.add(4).cast::<*mut u8>();
                                        let l2 = *base.add(8).cast::<usize>();
                                        let len3 = l2;
                                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                                        let l4 = *base.add(12).cast::<i32>();
                                        let l5 = *base.add(16).cast::<i32>();

                                        super::super::super::super::exports::dejavu::core::syntax_tree::TextElement {
                                            body: _rt::string_lift(bytes3),
                                            range: super::super::super::super::exports::dejavu::core::types::TextRange {
                                                head_offset: l4 as u32,
                                                tail_offset: l5 as u32,
                                            },
                                        }
                                    };
                                    V6::Text(e6)
                                }
                            };

                            v6
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(base7, len7 * 20, 4);
                    let base19 = arg3;
                    let len19 = arg4;
                    let mut result19 = _rt::Vec::with_capacity(len19);
                    for i in 0..len19 {
                        let base = base19.add(i * 24);
                        let e19 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                            let l11 = i32::from(*base.add(8).cast::<u8>());
                            use super::super::super::super::exports::dejavu::core::types::Value as V18;
                            let v18 = match l11 {
                                0 => V18::Null,
                                1 => {
                                    let e18 = {
                                        let l12 = i32::from(*base.add(16).cast::<u8>());

                                        _rt::bool_lift(l12 as u8)
                                    };
                                    V18::Bool(e18)
                                }
                                2 => {
                                    let e18 = {
                                        let l13 = *base.add(16).cast::<i64>();

                                        l13
                                    };
                                    V18::Integer(e18)
                                }
                                3 => {
                                    let e18 = {
                                        let l14 = *base.add(16).cast::<f64>();

                                        l14
                                    };
                                    V18::Decimal(e18)
                                }
                                n => {
                                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                                    let e18 = {
                                        let l15 = *base.add(16).cast::<*mut u8>();
                                        let l16 = *base.add(20).cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                        _rt::string_lift(bytes17)
                                    };
                                    V18::String(e18)
                                }
                            };

                            (_rt::string_lift(bytes10), v18)
                        };
                        result19.push(e19);
                    }
                    _rt::cabi_dealloc(base19, len19 * 24, 8);
                    let result20 = T::finalize(
                        RustVanillaBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::exports::dejavu::core::syntax_tree::DejavuTemplate {
                            blocks: result7,
                            config: super::super::super::super::exports::dejavu::core::types::Object { map: result19 },
                            path: match arg5 {
                                0 => None,
                                1 => {
                                    let e =
                                        super::super::super::super::exports::dejavu::core::types::Url::from_handle(arg6 as u32);
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr21 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result20 {
                        Ok(_) => {
                            *ptr21.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr21.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::dejavu::core::types::DejavuError as V25;
                            match e {
                                V25::Syntax(e) => {
                                    *ptr21.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::dejavu::core::types::SyntaxError {
                                        reason: reason22,
                                        file: file22,
                                        range: range22,
                                    } = e;
                                    let vec23 = (reason22.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr21.add(12).cast::<usize>() = len23;
                                    *ptr21.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    match file22 {
                                        Some(e) => {
                                            *ptr21.add(16).cast::<u8>() = (1i32) as u8;
                                            *ptr21.add(20).cast::<i32>() = (e).take_handle() as i32;
                                        }
                                        None => {
                                            *ptr21.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let super::super::super::super::exports::dejavu::core::types::TextRange {
                                        head_offset: head_offset24,
                                        tail_offset: tail_offset24,
                                    } = range22;
                                    *ptr21.add(24).cast::<i32>() = _rt::as_i32(head_offset24);
                                    *ptr21.add(28).cast::<i32>() = _rt::as_i32(tail_offset24);
                                }
                            }
                        }
                    };
                    ptr21
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_rust_vanilla_finalize<T: GuestRustVanilla>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_rust_dejavu_cabi<T: GuestRustDejavu>(arg0: *mut u8, arg1: usize) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = RustDejavu::new(T::new(_rt::string_lift(bytes0)));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_rust_dejavu_generate_cabi<T: GuestRustDejavu>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base7 = arg1;
                    let len7 = arg2;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7.add(i * 20);
                        let e7 = {
                            let l0 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::exports::dejavu::core::syntax_tree::TemplateItem as V6;
                            let v6 = match l0 {
                                0 => V6::Placeholder,
                                n => {
                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                    let e6 = {
                                        let l1 = *base.add(4).cast::<*mut u8>();
                                        let l2 = *base.add(8).cast::<usize>();
                                        let len3 = l2;
                                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                                        let l4 = *base.add(12).cast::<i32>();
                                        let l5 = *base.add(16).cast::<i32>();

                                        super::super::super::super::exports::dejavu::core::syntax_tree::TextElement {
                                            body: _rt::string_lift(bytes3),
                                            range: super::super::super::super::exports::dejavu::core::types::TextRange {
                                                head_offset: l4 as u32,
                                                tail_offset: l5 as u32,
                                            },
                                        }
                                    };
                                    V6::Text(e6)
                                }
                            };

                            v6
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(base7, len7 * 20, 4);
                    let base19 = arg3;
                    let len19 = arg4;
                    let mut result19 = _rt::Vec::with_capacity(len19);
                    for i in 0..len19 {
                        let base = base19.add(i * 24);
                        let e19 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                            let l11 = i32::from(*base.add(8).cast::<u8>());
                            use super::super::super::super::exports::dejavu::core::types::Value as V18;
                            let v18 = match l11 {
                                0 => V18::Null,
                                1 => {
                                    let e18 = {
                                        let l12 = i32::from(*base.add(16).cast::<u8>());

                                        _rt::bool_lift(l12 as u8)
                                    };
                                    V18::Bool(e18)
                                }
                                2 => {
                                    let e18 = {
                                        let l13 = *base.add(16).cast::<i64>();

                                        l13
                                    };
                                    V18::Integer(e18)
                                }
                                3 => {
                                    let e18 = {
                                        let l14 = *base.add(16).cast::<f64>();

                                        l14
                                    };
                                    V18::Decimal(e18)
                                }
                                n => {
                                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                                    let e18 = {
                                        let l15 = *base.add(16).cast::<*mut u8>();
                                        let l16 = *base.add(20).cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                        _rt::string_lift(bytes17)
                                    };
                                    V18::String(e18)
                                }
                            };

                            (_rt::string_lift(bytes10), v18)
                        };
                        result19.push(e19);
                    }
                    _rt::cabi_dealloc(base19, len19 * 24, 8);
                    let result20 = T::generate(
                        RustDejavuBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::exports::dejavu::core::syntax_tree::DejavuTemplate {
                            blocks: result7,
                            config: super::super::super::super::exports::dejavu::core::types::Object { map: result19 },
                            path: match arg5 {
                                0 => None,
                                1 => {
                                    let e =
                                        super::super::super::super::exports::dejavu::core::types::Url::from_handle(arg6 as u32);
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr21 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result20 {
                        Ok(_) => {
                            *ptr21.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr21.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::dejavu::core::types::DejavuError as V25;
                            match e {
                                V25::Syntax(e) => {
                                    *ptr21.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::dejavu::core::types::SyntaxError {
                                        reason: reason22,
                                        file: file22,
                                        range: range22,
                                    } = e;
                                    let vec23 = (reason22.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr21.add(12).cast::<usize>() = len23;
                                    *ptr21.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    match file22 {
                                        Some(e) => {
                                            *ptr21.add(16).cast::<u8>() = (1i32) as u8;
                                            *ptr21.add(20).cast::<i32>() = (e).take_handle() as i32;
                                        }
                                        None => {
                                            *ptr21.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let super::super::super::super::exports::dejavu::core::types::TextRange {
                                        head_offset: head_offset24,
                                        tail_offset: tail_offset24,
                                    } = range22;
                                    *ptr21.add(24).cast::<i32>() = _rt::as_i32(head_offset24);
                                    *ptr21.add(28).cast::<i32>() = _rt::as_i32(tail_offset24);
                                }
                            }
                        }
                    };
                    ptr21
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_rust_dejavu_generate<T: GuestRustDejavu>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_java_script_vanilla_cabi<T: GuestJavaScriptVanilla>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = JavaScriptVanilla::new(T::new(_rt::string_lift(bytes0)));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_java_script_vanilla_finalize_cabi<T: GuestJavaScriptVanilla>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base7 = arg1;
                    let len7 = arg2;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7.add(i * 20);
                        let e7 = {
                            let l0 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::exports::dejavu::core::syntax_tree::TemplateItem as V6;
                            let v6 = match l0 {
                                0 => V6::Placeholder,
                                n => {
                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                    let e6 = {
                                        let l1 = *base.add(4).cast::<*mut u8>();
                                        let l2 = *base.add(8).cast::<usize>();
                                        let len3 = l2;
                                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                                        let l4 = *base.add(12).cast::<i32>();
                                        let l5 = *base.add(16).cast::<i32>();

                                        super::super::super::super::exports::dejavu::core::syntax_tree::TextElement {
                                            body: _rt::string_lift(bytes3),
                                            range: super::super::super::super::exports::dejavu::core::types::TextRange {
                                                head_offset: l4 as u32,
                                                tail_offset: l5 as u32,
                                            },
                                        }
                                    };
                                    V6::Text(e6)
                                }
                            };

                            v6
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(base7, len7 * 20, 4);
                    let base19 = arg3;
                    let len19 = arg4;
                    let mut result19 = _rt::Vec::with_capacity(len19);
                    for i in 0..len19 {
                        let base = base19.add(i * 24);
                        let e19 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                            let l11 = i32::from(*base.add(8).cast::<u8>());
                            use super::super::super::super::exports::dejavu::core::types::Value as V18;
                            let v18 = match l11 {
                                0 => V18::Null,
                                1 => {
                                    let e18 = {
                                        let l12 = i32::from(*base.add(16).cast::<u8>());

                                        _rt::bool_lift(l12 as u8)
                                    };
                                    V18::Bool(e18)
                                }
                                2 => {
                                    let e18 = {
                                        let l13 = *base.add(16).cast::<i64>();

                                        l13
                                    };
                                    V18::Integer(e18)
                                }
                                3 => {
                                    let e18 = {
                                        let l14 = *base.add(16).cast::<f64>();

                                        l14
                                    };
                                    V18::Decimal(e18)
                                }
                                n => {
                                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                                    let e18 = {
                                        let l15 = *base.add(16).cast::<*mut u8>();
                                        let l16 = *base.add(20).cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                        _rt::string_lift(bytes17)
                                    };
                                    V18::String(e18)
                                }
                            };

                            (_rt::string_lift(bytes10), v18)
                        };
                        result19.push(e19);
                    }
                    _rt::cabi_dealloc(base19, len19 * 24, 8);
                    let result20 = T::finalize(
                        JavaScriptVanillaBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::exports::dejavu::core::syntax_tree::DejavuTemplate {
                            blocks: result7,
                            config: super::super::super::super::exports::dejavu::core::types::Object { map: result19 },
                            path: match arg5 {
                                0 => None,
                                1 => {
                                    let e =
                                        super::super::super::super::exports::dejavu::core::types::Url::from_handle(arg6 as u32);
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr21 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result20 {
                        Ok(_) => {
                            *ptr21.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr21.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::dejavu::core::types::DejavuError as V25;
                            match e {
                                V25::Syntax(e) => {
                                    *ptr21.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::dejavu::core::types::SyntaxError {
                                        reason: reason22,
                                        file: file22,
                                        range: range22,
                                    } = e;
                                    let vec23 = (reason22.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr21.add(12).cast::<usize>() = len23;
                                    *ptr21.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    match file22 {
                                        Some(e) => {
                                            *ptr21.add(16).cast::<u8>() = (1i32) as u8;
                                            *ptr21.add(20).cast::<i32>() = (e).take_handle() as i32;
                                        }
                                        None => {
                                            *ptr21.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let super::super::super::super::exports::dejavu::core::types::TextRange {
                                        head_offset: head_offset24,
                                        tail_offset: tail_offset24,
                                    } = range22;
                                    *ptr21.add(24).cast::<i32>() = _rt::as_i32(head_offset24);
                                    *ptr21.add(28).cast::<i32>() = _rt::as_i32(tail_offset24);
                                }
                            }
                        }
                    };
                    ptr21
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_java_script_vanilla_finalize<T: GuestJavaScriptVanilla>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_type_script_vanilla_cabi<T: GuestTypeScriptVanilla>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = TypeScriptVanilla::new(T::new(_rt::string_lift(bytes0)));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_type_script_vanilla_finalize_cabi<T: GuestTypeScriptVanilla>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base7 = arg1;
                    let len7 = arg2;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7.add(i * 20);
                        let e7 = {
                            let l0 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::exports::dejavu::core::syntax_tree::TemplateItem as V6;
                            let v6 = match l0 {
                                0 => V6::Placeholder,
                                n => {
                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                    let e6 = {
                                        let l1 = *base.add(4).cast::<*mut u8>();
                                        let l2 = *base.add(8).cast::<usize>();
                                        let len3 = l2;
                                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                                        let l4 = *base.add(12).cast::<i32>();
                                        let l5 = *base.add(16).cast::<i32>();

                                        super::super::super::super::exports::dejavu::core::syntax_tree::TextElement {
                                            body: _rt::string_lift(bytes3),
                                            range: super::super::super::super::exports::dejavu::core::types::TextRange {
                                                head_offset: l4 as u32,
                                                tail_offset: l5 as u32,
                                            },
                                        }
                                    };
                                    V6::Text(e6)
                                }
                            };

                            v6
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(base7, len7 * 20, 4);
                    let base19 = arg3;
                    let len19 = arg4;
                    let mut result19 = _rt::Vec::with_capacity(len19);
                    for i in 0..len19 {
                        let base = base19.add(i * 24);
                        let e19 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                            let l11 = i32::from(*base.add(8).cast::<u8>());
                            use super::super::super::super::exports::dejavu::core::types::Value as V18;
                            let v18 = match l11 {
                                0 => V18::Null,
                                1 => {
                                    let e18 = {
                                        let l12 = i32::from(*base.add(16).cast::<u8>());

                                        _rt::bool_lift(l12 as u8)
                                    };
                                    V18::Bool(e18)
                                }
                                2 => {
                                    let e18 = {
                                        let l13 = *base.add(16).cast::<i64>();

                                        l13
                                    };
                                    V18::Integer(e18)
                                }
                                3 => {
                                    let e18 = {
                                        let l14 = *base.add(16).cast::<f64>();

                                        l14
                                    };
                                    V18::Decimal(e18)
                                }
                                n => {
                                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                                    let e18 = {
                                        let l15 = *base.add(16).cast::<*mut u8>();
                                        let l16 = *base.add(20).cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                        _rt::string_lift(bytes17)
                                    };
                                    V18::String(e18)
                                }
                            };

                            (_rt::string_lift(bytes10), v18)
                        };
                        result19.push(e19);
                    }
                    _rt::cabi_dealloc(base19, len19 * 24, 8);
                    let result20 = T::finalize(
                        TypeScriptVanillaBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::exports::dejavu::core::syntax_tree::DejavuTemplate {
                            blocks: result7,
                            config: super::super::super::super::exports::dejavu::core::types::Object { map: result19 },
                            path: match arg5 {
                                0 => None,
                                1 => {
                                    let e =
                                        super::super::super::super::exports::dejavu::core::types::Url::from_handle(arg6 as u32);
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr21 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result20 {
                        Ok(_) => {
                            *ptr21.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr21.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::dejavu::core::types::DejavuError as V25;
                            match e {
                                V25::Syntax(e) => {
                                    *ptr21.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::dejavu::core::types::SyntaxError {
                                        reason: reason22,
                                        file: file22,
                                        range: range22,
                                    } = e;
                                    let vec23 = (reason22.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr21.add(12).cast::<usize>() = len23;
                                    *ptr21.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    match file22 {
                                        Some(e) => {
                                            *ptr21.add(16).cast::<u8>() = (1i32) as u8;
                                            *ptr21.add(20).cast::<i32>() = (e).take_handle() as i32;
                                        }
                                        None => {
                                            *ptr21.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let super::super::super::super::exports::dejavu::core::types::TextRange {
                                        head_offset: head_offset24,
                                        tail_offset: tail_offset24,
                                    } = range22;
                                    *ptr21.add(24).cast::<i32>() = _rt::as_i32(head_offset24);
                                    *ptr21.add(28).cast::<i32>() = _rt::as_i32(tail_offset24);
                                }
                            }
                        }
                    };
                    ptr21
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_type_script_vanilla_finalize<T: GuestTypeScriptVanilla>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type RustVanilla: GuestRustVanilla;
                    type RustDejavu: GuestRustDejavu;
                    type JavaScriptVanilla: GuestJavaScriptVanilla;
                    type TypeScriptVanilla: GuestTypeScriptVanilla;
                }
                pub trait GuestRustVanilla: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]rust-vanilla"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]rust-vanilla"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(directory: _rt::String) -> Self;
                    fn finalize(&self, ast: DejavuTemplate) -> Result<(), DejavuError>;
                }
                pub trait GuestRustDejavu: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]rust-dejavu"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]rust-dejavu"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(directory: _rt::String) -> Self;
                    fn generate(&self, ast: DejavuTemplate) -> Result<(), DejavuError>;
                }
                pub trait GuestJavaScriptVanilla: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]java-script-vanilla"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]java-script-vanilla"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(directory: _rt::String) -> Self;
                    fn finalize(&self, ast: DejavuTemplate) -> Result<(), DejavuError>;
                }
                pub trait GuestTypeScriptVanilla: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]type-script-vanilla"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]dejavu:core/backends@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]type-script-vanilla"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(directory: _rt::String) -> Self;
                    fn finalize(&self, ast: DejavuTemplate) -> Result<(), DejavuError>;
                }
                #[doc(hidden)]

                macro_rules! __export_dejavu_core_backends_0_1_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "dejavu:core/backends@0.1.0#[constructor]rust-vanilla"]
    unsafe extern "C" fn export_constructor_rust_vanilla(arg0: *mut u8,arg1: usize,) -> i32 {
      $($path_to_types)*::_export_constructor_rust_vanilla_cabi::<<$ty as $($path_to_types)*::Guest>::RustVanilla>(arg0, arg1)
    }
    #[export_name = "dejavu:core/backends@0.1.0#[method]rust-vanilla.finalize"]
    unsafe extern "C" fn export_method_rust_vanilla_finalize(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,arg5: i32,arg6: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_rust_vanilla_finalize_cabi::<<$ty as $($path_to_types)*::Guest>::RustVanilla>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
    }
    #[export_name = "cabi_post_dejavu:core/backends@0.1.0#[method]rust-vanilla.finalize"]
    unsafe extern "C" fn _post_return_method_rust_vanilla_finalize(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_rust_vanilla_finalize::<<$ty as $($path_to_types)*::Guest>::RustVanilla>(arg0)
    }
    #[export_name = "dejavu:core/backends@0.1.0#[constructor]rust-dejavu"]
    unsafe extern "C" fn export_constructor_rust_dejavu(arg0: *mut u8,arg1: usize,) -> i32 {
      $($path_to_types)*::_export_constructor_rust_dejavu_cabi::<<$ty as $($path_to_types)*::Guest>::RustDejavu>(arg0, arg1)
    }
    #[export_name = "dejavu:core/backends@0.1.0#[method]rust-dejavu.generate"]
    unsafe extern "C" fn export_method_rust_dejavu_generate(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,arg5: i32,arg6: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_rust_dejavu_generate_cabi::<<$ty as $($path_to_types)*::Guest>::RustDejavu>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
    }
    #[export_name = "cabi_post_dejavu:core/backends@0.1.0#[method]rust-dejavu.generate"]
    unsafe extern "C" fn _post_return_method_rust_dejavu_generate(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_rust_dejavu_generate::<<$ty as $($path_to_types)*::Guest>::RustDejavu>(arg0)
    }
    #[export_name = "dejavu:core/backends@0.1.0#[constructor]java-script-vanilla"]
    unsafe extern "C" fn export_constructor_java_script_vanilla(arg0: *mut u8,arg1: usize,) -> i32 {
      $($path_to_types)*::_export_constructor_java_script_vanilla_cabi::<<$ty as $($path_to_types)*::Guest>::JavaScriptVanilla>(arg0, arg1)
    }
    #[export_name = "dejavu:core/backends@0.1.0#[method]java-script-vanilla.finalize"]
    unsafe extern "C" fn export_method_java_script_vanilla_finalize(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,arg5: i32,arg6: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_java_script_vanilla_finalize_cabi::<<$ty as $($path_to_types)*::Guest>::JavaScriptVanilla>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
    }
    #[export_name = "cabi_post_dejavu:core/backends@0.1.0#[method]java-script-vanilla.finalize"]
    unsafe extern "C" fn _post_return_method_java_script_vanilla_finalize(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_java_script_vanilla_finalize::<<$ty as $($path_to_types)*::Guest>::JavaScriptVanilla>(arg0)
    }
    #[export_name = "dejavu:core/backends@0.1.0#[constructor]type-script-vanilla"]
    unsafe extern "C" fn export_constructor_type_script_vanilla(arg0: *mut u8,arg1: usize,) -> i32 {
      $($path_to_types)*::_export_constructor_type_script_vanilla_cabi::<<$ty as $($path_to_types)*::Guest>::TypeScriptVanilla>(arg0, arg1)
    }
    #[export_name = "dejavu:core/backends@0.1.0#[method]type-script-vanilla.finalize"]
    unsafe extern "C" fn export_method_type_script_vanilla_finalize(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,arg5: i32,arg6: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_type_script_vanilla_finalize_cabi::<<$ty as $($path_to_types)*::Guest>::TypeScriptVanilla>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
    }
    #[export_name = "cabi_post_dejavu:core/backends@0.1.0#[method]type-script-vanilla.finalize"]
    unsafe extern "C" fn _post_return_method_type_script_vanilla_finalize(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_type_script_vanilla_finalize::<<$ty as $($path_to_types)*::Guest>::TypeScriptVanilla>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "dejavu:core/backends@0.1.0#[dtor]rust-vanilla"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::RustVanilla::dtor::<
        <$ty as $($path_to_types)*::Guest>::RustVanilla
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "dejavu:core/backends@0.1.0#[dtor]rust-dejavu"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::RustDejavu::dtor::<
        <$ty as $($path_to_types)*::Guest>::RustDejavu
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "dejavu:core/backends@0.1.0#[dtor]java-script-vanilla"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::JavaScriptVanilla::dtor::<
        <$ty as $($path_to_types)*::Guest>::JavaScriptVanilla
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "dejavu:core/backends@0.1.0#[dtor]type-script-vanilla"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::TypeScriptVanilla::dtor::<
        <$ty as $($path_to_types)*::Guest>::TypeScriptVanilla
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_dejavu_core_backends_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 32]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 32]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::{string::String, vec::Vec};

    use core::{
        fmt, marker,
        sync::atomic::{AtomicU32, Ordering::Relaxed},
    };

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self { handle: AtomicU32::new(handle), _marker: marker::PhantomData }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) { String::from_utf8(bytes).unwrap() } else { String::from_utf8_unchecked(bytes) }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        }
        else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) { panic!("invalid enum discriminant") } else { core::hint::unreachable_unchecked() }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_host_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::dejavu::core::types::__export_dejavu_core_types_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::dejavu::core::types);
  $($path_to_types_root)*::exports::dejavu::core::syntax_tree::__export_dejavu_core_syntax_tree_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::dejavu::core::syntax_tree);
  $($path_to_types_root)*::exports::dejavu::core::backends::__export_dejavu_core_backends_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::dejavu::core::backends);
  )
}
#[doc(inline)]
pub(crate) use __export_host_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:host:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1379] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe8\x09\x01A\x02\x01\
A\x0b\x01B\x0f\x01q\x05\x04null\0\0\x04bool\x01\x7f\0\x07integer\x01x\0\x07decim\
al\x01u\0\x06string\x01s\0\x04\0\x05value\x03\0\0\x01o\x02s\x01\x01p\x02\x01r\x01\
\x03map\x03\x04\0\x06object\x03\0\x04\x04\0\x03url\x03\x01\x01r\x02\x0bhead-offs\
ety\x0btail-offsety\x04\0\x0atext-range\x03\0\x07\x01i\x06\x01k\x09\x01r\x03\x06\
reasons\x04file\x0a\x05range\x08\x04\0\x0csyntax-error\x03\0\x0b\x01q\x01\x06syn\
tax\x01\x0c\0\x04\0\x0cdejavu-error\x03\0\x0d\x04\x01\x17dejavu:core/types@0.1.0\
\x05\0\x02\x03\0\0\x0atext-range\x02\x03\0\0\x03url\x02\x03\0\0\x06object\x02\x03\
\0\0\x0cdejavu-error\x01B\x11\x02\x03\x02\x01\x01\x04\0\x0atext-range\x03\0\0\x02\
\x03\x02\x01\x02\x04\0\x03url\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x06object\x03\0\
\x04\x02\x03\x02\x01\x04\x04\0\x0cdejavu-error\x03\0\x06\x01r\x02\x04bodys\x05ra\
nge\x01\x04\0\x0ctext-element\x03\0\x08\x01q\x02\x0bplaceholder\0\0\x04text\x01\x09\
\0\x04\0\x0dtemplate-item\x03\0\x0a\x01p\x0b\x01i\x03\x01k\x0d\x01r\x03\x06block\
s\x0c\x06config\x05\x04path\x0e\x04\0\x0fdejavu-template\x03\0\x0f\x04\x01\x1dde\
javu:core/syntax-tree@0.1.0\x05\x05\x02\x03\0\x01\x0fdejavu-template\x01B'\x02\x03\
\x02\x01\x06\x04\0\x0fdejavu-template\x03\0\0\x02\x03\x02\x01\x01\x04\0\x0atext-\
range\x03\0\x02\x02\x03\x02\x01\x02\x04\0\x03url\x03\0\x04\x02\x03\x02\x01\x03\x04\
\0\x06object\x03\0\x06\x02\x03\x02\x01\x04\x04\0\x0cdejavu-error\x03\0\x08\x04\0\
\x0crust-vanilla\x03\x01\x04\0\x0brust-dejavu\x03\x01\x04\0\x13java-script-vanil\
la\x03\x01\x04\0\x13type-script-vanilla\x03\x01\x01i\x0a\x01@\x01\x09directorys\0\
\x0e\x04\0\x19[constructor]rust-vanilla\x01\x0f\x01h\x0a\x01j\0\x01\x09\x01@\x02\
\x04self\x10\x03ast\x01\0\x11\x04\0\x1d[method]rust-vanilla.finalize\x01\x12\x01\
i\x0b\x01@\x01\x09directorys\0\x13\x04\0\x18[constructor]rust-dejavu\x01\x14\x01\
h\x0b\x01@\x02\x04self\x15\x03ast\x01\0\x11\x04\0\x1c[method]rust-dejavu.generat\
e\x01\x16\x01i\x0c\x01@\x01\x09directorys\0\x17\x04\0\x20[constructor]java-scrip\
t-vanilla\x01\x18\x01h\x0c\x01@\x02\x04self\x19\x03ast\x01\0\x11\x04\0$[method]j\
ava-script-vanilla.finalize\x01\x1a\x01i\x0d\x01@\x01\x09directorys\0\x1b\x04\0\x20\
[constructor]type-script-vanilla\x01\x1c\x01h\x0d\x01@\x02\x04self\x1d\x03ast\x01\
\0\x11\x04\0$[method]type-script-vanilla.finalize\x01\x1e\x04\x01\x1adejavu:core\
/backends@0.1.0\x05\x07\x04\x01\x16dejavu:core/host@0.1.0\x04\0\x0b\x0a\x01\0\x04\
host\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.202.0\
\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
